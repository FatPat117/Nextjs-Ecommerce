// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product{
  id String @id @default(cuid())
  name String
  price Float
  description String?
  image String?
  slug String @unique
  inventory Int @default(0)

  cartItems CartItem[]
  // Relation
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]  
 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Category{
  id String @id @default(cuid())
  name String
  slug String @unique
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}
    
model Cart{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

 items CartItem[]
}

model CartItem {
  id String @id @default(cuid())
  quantity Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Relation
  cartId String
  cart Cart @relation(fields: [cartId], references: [id])

    // Relation
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId ])
  @@index([cartId])
  @@index([productId])  
}

model Order{
  id String @id @default(cuid())
  total Float
  status String @default("pending")
  stripeSessionId String?
  stripePaymentIntentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

// Relater
items OrderItem[]

userId String?
user User? @relation(fields: [userId], references: [id],onDelete: SetNull)
}

model OrderItem{
  id String @id @default(cuid())
  quantity Int @default(1)
  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  // Relation
  orderId String
  order Order @relation(fields: [orderId], references: [id])

  productId String
  product Product @relation(fields: [productId],references: [id])

}

model User{
  id String @id @default(cuid())
  name String?
  email String @unique
  password String
  role String @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  orders Order[]


}